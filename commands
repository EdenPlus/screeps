// This script allows for control over things through the console

/*
Description:
Used to reset a section of the planning

Parameters:
targetRoom - Room object
targetPlan - String (look to switch statement for the list)

Usage:
require('commands').resetPlan({Room object}, String);

Example:
require('commands').resetPlan(Game.rooms['sim'], 'ramparts');
*/
function resetPlan(targetRoom, targetPlan) {
    //    Road: 1        | D  Rampart: 2      |    Wall: 3         | D  Extension: 4
    // D  Tower: 5       | D  Spawn: 6        |    Power Spawn: 7  | D  Storage: 8
    //    Link: 9        | D  Lab: 10         | D  Terminal: 11    |    Observer: 12 
    //    Extractor: 13  | D  Container: 14
    switch(targetPlan) {
        case "extensions":
            return "Sorry, but that plan reset hasn't been made";
            break;
        case "core":
            return "Sorry, but that plan reset hasn't been made";
            break;
        case "labs":
            return "Sorry, but that plan reset hasn't been made";
            break;
        case "sourceRoads":
            return "Sorry, but that plan reset hasn't been made";
            break;
        case "towers":
            var temp = _.filter(targetRoom.memory.plan.planQueue, (schematic) => schematic.type != 5);
            targetRoom.memory.plan.planQueue = temp;
            targetRoom.memory.plan.towers = false;
            break;
        case "ramparts":
            var temp = _.filter(targetRoom.memory.plan.planQueue, (schematic) => schematic.type != 2);
            targetRoom.memory.plan.planQueue = temp;
            targetRoom.memory.plan.ramparts = false;
            break;
        default:
            return "Invalid planner type";
    }
}

/*
Description:
Shorthand for: Memory.tickSpeedReport = (true/false)

Parameters:
N/A

Usage:
require('commands').toggleTSR();

Example:
require('commands').toggleTSR();
*/
function toggleTSR() {
    if (Memory.tickSpeedReport == true) {
        Memory.tickSpeedReport = false;
    }
    else {
        Memory.tickSpeedReport = true;
    }
}

/*
Description:
Used to governs which room our room will attempt to take over

Parameters:
startingRoom - name of room to initiate attack
targetRoom - name of room we wish to attack

Usage:
require('commands').setAttackTarget(String, String);

Example:
require('commands').setAttackTarget('E11N53', 'E11N52');
*/
function setAttackTarget(startingRoom, targetRoom) {
    
    Game.rooms[startingRoom].memory.target = targetRoom;
}

// Whenever a command is added to this script, it needs to be referenced in this export, following the already listed function's format
module.exports = {
    resetPlan: resetPlan,
    toggleTSR: toggleTSR,
    setAttackTarget: setAttackTarget
};
