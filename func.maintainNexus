var maintainNexus = {
    
    run: function() {
        if (!Game.spawns['Spawn1'].memory.nexus) Game.spawns['Spawn1'].memory.nexus = [];
        if (!Game.spawns['Spawn1'].memory.nexusSize) Game.spawns['Spawn1'].memory.nexusSize = 4;
        
        let extensionCount = CONTROLLER_STRUCTURES[STRUCTURE_EXTENSION][Game.rooms['sim'].controller.level];
        let spawnPos = Game.spawns['Spawn1'].pos;
        
        fillNexusMap:
        while (Game.spawns['Spawn1'].memory.nexus.length < extensionCount) {
            let a = Game.spawns['Spawn1'].memory.nexusSize;
            let b = 0;
            while (a >= 0) {
                while (b <= (Game.spawns['Spawn1'].memory.nexusSize - a)) {
                    var curCoord = {x: spawnPos.x + a, y: spawnPos.y + b};
                    var isDupe = false;
                    for (var i in Game.spawns['Spawn1'].memory.nexus) {
                        if (Game.spawns['Spawn1'].memory.nexus[i].x == curCoord.x && Game.spawns['Spawn1'].memory.nexus[i].y == curCoord.y) {
                            isDupe = true;
                        }
                    }
                    // Start Tile Validator
                    var isBadLoc = false;
                    var tile = Game.spawns['Spawn1'].room.lookAt(curCoord.x, curCoord.y);
                    tileCheck:
                    for (var x in tile) {
                        if (tile[x][0] == 'structure') {
                            isBadLoc = true;
                            break tileCheck;
                        }
                        if (tile[x][1] == 'wall') {
                            isBadLoc = true;
                            break tileCheck;
                        }
                    }
                    if (isBadLoc) {
                        console.log('The tile at: [' + curCoord.x + ',' + curCoord.y + '] is a bad tile, recalculating...');
                    }
                    // End Tile Validator
                    if (!isDupe && !isBadLoc) Game.spawns['Spawn1'].memory.nexus.push({x: curCoord.x, y: curCoord.y});
                    if (Game.spawns['Spawn1'].memory.nexus.length >= extensionCount) break fillNexusMap;
                    
                    curCoord = {x: spawnPos.x + a, y: spawnPos.y - b};
                    isDupe = false;
                    isBadLoc = false;
                    for (var i in Game.spawns['Spawn1'].memory.nexus) {
                        if (Game.spawns['Spawn1'].memory.nexus[i].x == curCoord.x && Game.spawns['Spawn1'].memory.nexus[i].y == curCoord.y) {
                            isDupe = true;
                        }
                    }
                    // isBadLoc check here
                    if (!isDupe && !isBadLoc) Game.spawns['Spawn1'].memory.nexus.push({x: curCoord.x, y: curCoord.y});
                    if (Game.spawns['Spawn1'].memory.nexus.length >= extensionCount) break fillNexusMap;
                    
                    curCoord = {x: spawnPos.x - a, y: spawnPos.y + b};
                    isDupe = false;
                    isBadLoc = false;
                    for (var i in Game.spawns['Spawn1'].memory.nexus) {
                        if (Game.spawns['Spawn1'].memory.nexus[i].x == curCoord.x && Game.spawns['Spawn1'].memory.nexus[i].y == curCoord.y) {
                            isDupe = true;
                        }
                    }
                    // isBadLoc check here
                    if (!isDupe && !isBadLoc) Game.spawns['Spawn1'].memory.nexus.push({x: curCoord.x, y: curCoord.y});
                    if (Game.spawns['Spawn1'].memory.nexus.length >= extensionCount) break fillNexusMap;
                    
                    curCoord = {x: spawnPos.x - a, y: spawnPos.y - b};
                    isDupe = false;
                    isBadLoc = false;
                    for (var i in Game.spawns['Spawn1'].memory.nexus) {
                        if (Game.spawns['Spawn1'].memory.nexus[i].x == curCoord.x && Game.spawns['Spawn1'].memory.nexus[i].y == curCoord.y) {
                            isDupe = true;
                        }
                    }
                    // isBadLoc check here
                    if (!isDupe && !isBadLoc) Game.spawns['Spawn1'].memory.nexus.push({x: curCoord.x, y: curCoord.y});
                    if (Game.spawns['Spawn1'].memory.nexus.length >= extensionCount) break fillNexusMap;
                    /*
                    isDupe = false;
                    isBadLoc = false;
                    for (var i in Game.spawns['Spawn1'].memory.nexus) {
                        if (Game.spawns['Spawn1'].memory.nexus[i].x == (spawnPos.x + a) && Game.spawns['Spawn1'].memory.nexus[i].y == (spawnPos.y - b)) isDupe = true;
                    }
                    if (!isDupe && !isBadLoc) Game.spawns['Spawn1'].memory.nexus.push({x: (spawnPos.x + a), y: (spawnPos.y - b)});
                    if (Game.spawns['Spawn1'].memory.nexus.length >= extensionCount) break fillNexusMap;
                    
                    isDupe = false;
                    isBadLoc = false;
                    for (var i in Game.spawns['Spawn1'].memory.nexus) {
                        if (Game.spawns['Spawn1'].memory.nexus[i].x == (spawnPos.x - a) && Game.spawns['Spawn1'].memory.nexus[i].y == (spawnPos.y + b)) isDupe = true;
                    }
                    if (!isDupe && !isBadLoc) Game.spawns['Spawn1'].memory.nexus.push({x: (spawnPos.x - a), y: (spawnPos.y + b)});
                    if (Game.spawns['Spawn1'].memory.nexus.length >= extensionCount) break fillNexusMap;
                    
                    isDupe = false;
                    isBadLoc = false;
                    for (var i in Game.spawns['Spawn1'].memory.nexus) {
                        if (Game.spawns['Spawn1'].memory.nexus[i].x == (spawnPos.x - a) && Game.spawns['Spawn1'].memory.nexus[i].y == (spawnPos.y - b)) {
                            isDupe = true;
                        }
                    }
                    if (!isDupe && !isBadLoc) Game.spawns['Spawn1'].memory.nexus.push({x: (spawnPos.x - a), y: (spawnPos.y - b)});
                    if (Game.spawns['Spawn1'].memory.nexus.length >= extensionCount) break fillNexusMap;
                    */
                    b++;
                }
                b = 0;
                a--;
            }
        }
    }
}

module.exports = maintainNexus;
