var statusReport = {
    
    run: function(curRoom) {
        const TICKSTOREPORT = 10;
        
        if (!(Game.time % TICKSTOREPORT)) {
            // State report start
            console.log('  -=======  STATE REPORT  =======-   ');
            console.log('Star Date: '+Game.time);
            console.log('Work Status: '+Memory.status);
            // State report end
            
            // Controller report start
            console.log('  -=======  CONTROLLER REPORT  =======-   ');
            console.log('Controller Level: '+curRoom.controller.level);
            
            var progressBar = '[';
            var progressBarLength = 29;
            for (let x = 0; x < progressBarLength; x++) {
                if (x == Math.floor(progressBarLength/2)) {
                    progressBar+=(curRoom.controller.progress/curRoom.controller.progressTotal * 100).toFixed(1)+'%';
                } else if (x/progressBarLength < curRoom.controller.progress/curRoom.controller.progressTotal) {
                    progressBar+='=';
                } else {
                    progressBar+=' ';
                }
            }
            progressBar += ']';
            
            console.log('Progess: '+curRoom.controller.progress+'/'+curRoom.controller.progressTotal+
    //            ' = '+(Game.rooms['sim'].controller.progress/Game.rooms['sim'].controller.progressTotal * 100).toFixed(1)+'%' + 
                ' '+progressBar);
                
            if (curRoom.controller.ticksToDowngrade < CONTROLLER_DOWNGRADE[curRoom.controller.level]) {
                console.log('Ticks to downgrade: '+curRoom.controller.ticksToDowngrade);
            }
            // Controller report end
            
            // Speed report start
            console.log('  -=======  SPEED REPORT  =======-   ');
            if (!Memory.seconds) Memory.seconds = 0;
            
            var seconds = new Date().getSeconds();
            
            if (0 > (seconds - Memory.seconds)) {
                console.log(seconds + 60 - Memory.seconds+' seconds since last update.');
                console.log('Speed: '+(TICKSTOREPORT / (seconds + 60 - Memory.seconds)).toFixed(2)+' ticks per second.');
                console.log('Speed: '+((seconds + 60 - Memory.seconds) / TICKSTOREPORT).toFixed(2)+' seconds per tick.');
            } else {
                console.log(seconds - Memory.seconds+' seconds since last update.');
                console.log('Speed: '+(TICKSTOREPORT / (seconds - Memory.seconds)).toFixed(2)+' ticks per second.');
                console.log('Speed: '+((seconds - Memory.seconds) / TICKSTOREPORT).toFixed(2)+' seconds per tick.');
            }
            
            Memory.seconds = seconds;
            // Speed report end
            
            // Repair report start
            if (!Memory.repairSites) Memory.repairSites = [];
            
            if (Memory.repairSites.length) {
                console.log('  -=======  REPAIR REPORT  =======-   ');
                console.log(Memory.repairSites.length+' structures are damaged.')
            }
            // Repair report end
            
            // Energy report start
            console.log('  -=======  ENERGY REPORT  =======-   ');
            console.log('Room Energy: '+curRoom.energyAvailable+'/'+curRoom.energyCapacityAvailable+' = '+
            Math.floor((curRoom.energyAvailable/curRoom.energyCapacityAvailable) * 100) // Percent
            +"%");
            
            var containers = curRoom.find(FIND_STRUCTURES, {
                filter: (structure) => {
                    return structure.structureType == STRUCTURE_CONTAINER;
                }
            });
            
            if (containers.length) {
                if (curRoom.storage) {
                    containers = containers.concat(curRoom.storage);
                }
                for (let x in containers) {
                    console.log(containers[x]+' has '+containers[x].store.energy);
                }
            }
            // Energy report end
            
            // Nexus report start
            if (!Game.spawns['Spawn1'].memory.nexus) Game.spawns['Spawn1'].memory.nexus = [];
            if (Game.spawns['Spawn1'].memory.nexus.length) {
                console.log('  -=======  NEXUS REPORT  =======-   ');
                var temp = "Nexus Coords: ";
                for (var i in Game.spawns['Spawn1'].memory.nexus) {
                    temp += "[" + Game.spawns['Spawn1'].memory.nexus[i].x + "," + Game.spawns['Spawn1'].memory.nexus[i].y + "] ";
                }
                console.log(temp);
                var quickExt = Game.spawns['Spawn1'].room.find(FIND_MY_STRUCTURES, {
                  filter: { structureType: STRUCTURE_EXTENSION }
                });
                console.log("Extensions Built: " + quickExt.length + "/" + Game.spawns['Spawn1'].memory.nexus.length);
            }
            // Nexus report end
        }
        
        // Controller level up tick recorder start
        if (!Memory.levelTime) {
            Memory.levelTime = [];
        } else if (!Memory.levelTime[curRoom.controller.level]) {
            Memory.levelTime[curRoom.controller.level] =
                { level: curRoom.controller.level, time: Game.time}
        }
        // Controller level up tick recorder end
    }
}

module.exports = statusReport;
